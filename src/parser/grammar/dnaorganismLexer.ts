// Generated from grammar/dnaorganism.g4 by ANTLR 4.9.0-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class dnaorganismLexer extends Lexer {
	public static readonly DNAORGANISM = 1;
	public static readonly DNAGENE = 2;
	public static readonly DNA = 3;
	public static readonly GENOME = 4;
	public static readonly AGENTS = 5;
	public static readonly IMMUNE_SYS = 6;
	public static readonly MUTATIONS = 7;
	public static readonly ADAPTIVE_RES = 8;
	public static readonly ID = 9;
	public static readonly STRING = 10;
	public static readonly NUMBER = 11;
	public static readonly LBRACE = 12;
	public static readonly RBRACE = 13;
	public static readonly LPAREN = 14;
	public static readonly RPAREN = 15;
	public static readonly SEMI = 16;
	public static readonly COLON = 17;
	public static readonly COMMA = 18;
	public static readonly WS = 19;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"DNAORGANISM", "DNAGENE", "DNA", "GENOME", "AGENTS", "IMMUNE_SYS", "MUTATIONS", 
		"ADAPTIVE_RES", "ID", "STRING", "NUMBER", "LBRACE", "RBRACE", "LPAREN", 
		"RPAREN", "SEMI", "COLON", "COMMA", "WS",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, "'dnaorganism'", "'dnagene'", "'dna'", "'genome'", "'agents'", 
		"'dnaimmune_system'", "'mutations'", "'adaptive_responses'", undefined, 
		undefined, undefined, "'{'", "'}'", "'('", "')'", "';'", "':'", "','",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, "DNAORGANISM", "DNAGENE", "DNA", "GENOME", "AGENTS", "IMMUNE_SYS", 
		"MUTATIONS", "ADAPTIVE_RES", "ID", "STRING", "NUMBER", "LBRACE", "RBRACE", 
		"LPAREN", "RPAREN", "SEMI", "COLON", "COMMA", "WS",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(dnaorganismLexer._LITERAL_NAMES, dnaorganismLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return dnaorganismLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(dnaorganismLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "dnaorganism.g4"; }

	// @Override
	public get ruleNames(): string[] { return dnaorganismLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return dnaorganismLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return dnaorganismLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return dnaorganismLexer.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02\x15\xB1\b\x01" +
		"\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06" +
		"\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r" +
		"\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t" +
		"\x12\x04\x13\t\x13\x04\x14\t\x14\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02" +
		"\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x03\x03\x03" +
		"\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x04\x03\x04\x03\x04" +
		"\x03\x04\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x06" +
		"\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x07\x03\x07\x03\x07" +
		"\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07" +
		"\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\b\x03\b\x03\b\x03\b\x03\b" +
		"\x03\b\x03\b\x03\b\x03\b\x03\b\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03" +
		"\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03" +
		"\t\x03\n\x03\n\x07\n\x80\n\n\f\n\x0E\n\x83\v\n\x03\v\x03\v\x03\v\x03\v" +
		"\x07\v\x89\n\v\f\v\x0E\v\x8C\v\v\x03\v\x03\v\x03\f\x06\f\x91\n\f\r\f\x0E" +
		"\f\x92\x03\f\x03\f\x06\f\x97\n\f\r\f\x0E\f\x98\x05\f\x9B\n\f\x03\r\x03" +
		"\r\x03\x0E\x03\x0E\x03\x0F\x03\x0F\x03\x10\x03\x10\x03\x11\x03\x11\x03" +
		"\x12\x03\x12\x03\x13\x03\x13\x03\x14\x06\x14\xAC\n\x14\r\x14\x0E\x14\xAD" +
		"\x03\x14\x03\x14\x02\x02\x02\x15\x03\x02\x03\x05\x02\x04\x07\x02\x05\t" +
		"\x02\x06\v\x02\x07\r\x02\b\x0F\x02\t\x11\x02\n\x13\x02\v\x15\x02\f\x17" +
		"\x02\r\x19\x02\x0E\x1B\x02\x0F\x1D\x02\x10\x1F\x02\x11!\x02\x12#\x02\x13" +
		"%\x02\x14\'\x02\x15\x03\x02\x07\x05\x02C\\aac|\x06\x022;C\\aac|\x04\x02" +
		"$$^^\x03\x022;\x05\x02\v\f\x0F\x0F\"\"\x02\xB7\x02\x03\x03\x02\x02\x02" +
		"\x02\x05\x03\x02\x02\x02\x02\x07\x03\x02\x02\x02\x02\t\x03\x02\x02\x02" +
		"\x02\v\x03\x02\x02\x02\x02\r\x03\x02\x02\x02\x02\x0F\x03\x02\x02\x02\x02" +
		"\x11\x03\x02\x02\x02\x02\x13\x03\x02\x02\x02\x02\x15\x03\x02\x02\x02\x02" +
		"\x17\x03\x02\x02\x02\x02\x19\x03\x02\x02\x02\x02\x1B\x03\x02\x02\x02\x02" +
		"\x1D\x03\x02\x02\x02\x02\x1F\x03\x02\x02\x02\x02!\x03\x02\x02\x02\x02" +
		"#\x03\x02\x02\x02\x02%\x03\x02\x02\x02\x02\'\x03\x02\x02\x02\x03)\x03" +
		"\x02\x02\x02\x055\x03\x02\x02\x02\x07=\x03\x02\x02\x02\tA\x03\x02\x02" +
		"\x02\vH\x03\x02\x02\x02\rO\x03\x02\x02\x02\x0F`\x03\x02\x02\x02\x11j\x03" +
		"\x02\x02\x02\x13}\x03\x02\x02\x02\x15\x84\x03\x02\x02\x02\x17\x90\x03" +
		"\x02\x02\x02\x19\x9C\x03\x02\x02\x02\x1B\x9E\x03\x02\x02\x02\x1D\xA0\x03" +
		"\x02\x02\x02\x1F\xA2\x03\x02\x02\x02!\xA4\x03\x02\x02\x02#\xA6\x03\x02" +
		"\x02\x02%\xA8\x03\x02\x02\x02\'\xAB\x03\x02\x02\x02)*\x07f\x02\x02*+\x07" +
		"p\x02\x02+,\x07c\x02\x02,-\x07q\x02\x02-.\x07t\x02\x02./\x07i\x02\x02" +
		"/0\x07c\x02\x0201\x07p\x02\x0212\x07k\x02\x0223\x07u\x02\x0234\x07o\x02" +
		"\x024\x04\x03\x02\x02\x0256\x07f\x02\x0267\x07p\x02\x0278\x07c\x02\x02" +
		"89\x07i\x02\x029:\x07g\x02\x02:;\x07p\x02\x02;<\x07g\x02\x02<\x06\x03" +
		"\x02\x02\x02=>\x07f\x02\x02>?\x07p\x02\x02?@\x07c\x02\x02@\b\x03\x02\x02" +
		"\x02AB\x07i\x02\x02BC\x07g\x02\x02CD\x07p\x02\x02DE\x07q\x02\x02EF\x07" +
		"o\x02\x02FG\x07g\x02\x02G\n\x03\x02\x02\x02HI\x07c\x02\x02IJ\x07i\x02" +
		"\x02JK\x07g\x02\x02KL\x07p\x02\x02LM\x07v\x02\x02MN\x07u\x02\x02N\f\x03" +
		"\x02\x02\x02OP\x07f\x02\x02PQ\x07p\x02\x02QR\x07c\x02\x02RS\x07k\x02\x02" +
		"ST\x07o\x02\x02TU\x07o\x02\x02UV\x07w\x02\x02VW\x07p\x02\x02WX\x07g\x02" +
		"\x02XY\x07a\x02\x02YZ\x07u\x02\x02Z[\x07{\x02\x02[\\\x07u\x02\x02\\]\x07" +
		"v\x02\x02]^\x07g\x02\x02^_\x07o\x02\x02_\x0E\x03\x02\x02\x02`a\x07o\x02" +
		"\x02ab\x07w\x02\x02bc\x07v\x02\x02cd\x07c\x02\x02de\x07v\x02\x02ef\x07" +
		"k\x02\x02fg\x07q\x02\x02gh\x07p\x02\x02hi\x07u\x02\x02i\x10\x03\x02\x02" +
		"\x02jk\x07c\x02\x02kl\x07f\x02\x02lm\x07c\x02\x02mn\x07r\x02\x02no\x07" +
		"v\x02\x02op\x07k\x02\x02pq\x07x\x02\x02qr\x07g\x02\x02rs\x07a\x02\x02" +
		"st\x07t\x02\x02tu\x07g\x02\x02uv\x07u\x02\x02vw\x07r\x02\x02wx\x07q\x02" +
		"\x02xy\x07p\x02\x02yz\x07u\x02\x02z{\x07g\x02\x02{|\x07u\x02\x02|\x12" +
		"\x03\x02\x02\x02}\x81\t\x02\x02\x02~\x80\t\x03\x02\x02\x7F~\x03\x02\x02" +
		"\x02\x80\x83\x03\x02\x02\x02\x81\x7F\x03\x02\x02\x02\x81\x82\x03\x02\x02" +
		"\x02\x82\x14\x03\x02\x02\x02\x83\x81\x03\x02\x02\x02\x84\x8A\x07$\x02" +
		"\x02\x85\x89\n\x04\x02\x02\x86\x87\x07^\x02\x02\x87\x89\v\x02\x02\x02" +
		"\x88\x85\x03\x02\x02\x02\x88\x86\x03\x02\x02\x02\x89\x8C\x03\x02\x02\x02" +
		"\x8A\x88\x03\x02\x02\x02\x8A\x8B\x03\x02\x02\x02\x8B\x8D\x03\x02\x02\x02" +
		"\x8C\x8A\x03\x02\x02\x02\x8D\x8E\x07$\x02\x02\x8E\x16\x03\x02\x02\x02" +
		"\x8F\x91\t\x05\x02\x02\x90\x8F\x03\x02\x02\x02\x91\x92\x03\x02\x02\x02" +
		"\x92\x90\x03\x02\x02\x02\x92\x93\x03\x02\x02\x02\x93\x9A\x03\x02\x02\x02" +
		"\x94\x96\x070\x02\x02\x95\x97\t\x05\x02\x02\x96\x95\x03\x02\x02\x02\x97" +
		"\x98\x03\x02\x02\x02\x98\x96\x03\x02\x02\x02\x98\x99\x03\x02\x02\x02\x99" +
		"\x9B\x03\x02\x02\x02\x9A\x94\x03\x02\x02\x02\x9A\x9B\x03\x02\x02\x02\x9B" +
		"\x18\x03\x02\x02\x02\x9C\x9D\x07}\x02\x02\x9D\x1A\x03\x02\x02\x02\x9E" +
		"\x9F\x07\x7F\x02\x02\x9F\x1C\x03\x02\x02\x02\xA0\xA1\x07*\x02\x02\xA1" +
		"\x1E\x03\x02\x02\x02\xA2\xA3\x07+\x02\x02\xA3 \x03\x02\x02\x02\xA4\xA5" +
		"\x07=\x02\x02\xA5\"\x03\x02\x02\x02\xA6\xA7\x07<\x02\x02\xA7$\x03\x02" +
		"\x02\x02\xA8\xA9\x07.\x02\x02\xA9&\x03\x02\x02\x02\xAA\xAC\t\x06\x02\x02" +
		"\xAB\xAA\x03\x02\x02\x02\xAC\xAD\x03\x02\x02\x02\xAD\xAB\x03\x02\x02\x02" +
		"\xAD\xAE\x03\x02\x02\x02\xAE\xAF\x03\x02\x02\x02\xAF\xB0\b\x14\x02\x02" +
		"\xB0(\x03\x02\x02\x02\n\x02\x81\x88\x8A\x92\x98\x9A\xAD\x03\b\x02\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!dnaorganismLexer.__ATN) {
			dnaorganismLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(dnaorganismLexer._serializedATN));
		}

		return dnaorganismLexer.__ATN;
	}

}

